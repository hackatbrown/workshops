(require '[clojure-getting-started.web :as test]:reload)
(def server (web/-main))
(def server (test/-main))
(require '[clojure-getting-started.web :as test]:reload)
(def server (test/-main))
(require '[clojure-getting-started.web :as test]:reload)
(def server (test/-main))
(require '[clojure-getting-started.web :as test]:reload)
(def server (test/-main))
(.stop server)
(def server (test/-main))
(.stop server)
(require '[clojure-getting-started.web :as test]:reload)
(def server (test/-main))
(require '[clojure-getting-started.web :as test]:reload)
(def server (test/-main))
(require '[clojure-getting-started.web :as test]:reload)
(def server (test/-main))
(.stop server)
(require '[clojure-getting-started.web :as test]:reload)
(def server (test/-main))
(.stop server)
(require '[clojure-getting-started.web :as test]:reload)
(.stop server)
(def server (test/-main))
(.stop server)
(require '[clojure-getting-started.web :as test]:reload)
(def server (test/-main))
(.stop server)
(require '[clojure-getting-started.web :as test]:reload)
(def server (test/-main))
(require '[clojure-getting-started.web :as test]:reload)
(def server (test/-main))
(.stop server)
(require '[clojure-getting-started.web :as test]:reload)
(def server (test/-main))
(.stop server)
(require '[clojure-getting-started.web :as test]:reload)
(def server (test/-main))
(.stop server)
(require '[clojure-getting-started.web :as test]:reload)
(def server (test/-main))
(.stop server)
(require '[clojure-getting-started.web :as test]:reload)
(def server (test/-main))
(require '[clojure-getting-started.web :as test]:reload)
(def server (test/-main))
(.stop server)
(require '[clojure-getting-started.web :as test]:reload)
(def server (test/-main))
(.stop server)
(require '[clojure-getting-started.web :as test]:reload)
(def server (test/-main))
(.stop server)
(require '[clojure-getting-started.web :as test]:reload)
(def server (test/-main))
(.stop server)
(require '[clojure-getting-started.web :as test]:reload)
(def server (test/-main))
(.stop server)
(require '[clojure-getting-started.web :as test]:reload)
(def server (test/-main))
(.stop server)
(require '[clojure-getting-started.web :as test]:reload)
(def server (test/-main))
(.stop server)
(require '[clojure-getting-started.web :as test]:reload)
(def server (test/-main))
(.stop server)
(require '[clojure-getting-started.web :as test]:reload)
(def server (test/-main))
(.stop server)
(require '[clojure-getting-started.web :as test]:reload)
(def server (test/-main))
(.stop server)
(require '[clojure-getting-started.web :as test]:reload)
(def server (test/-main))
(.stop server)
(require '[clojure-getting-started.web :as test]:reload)
(def server (test/-main))
(.stop server)
(require '[clojure-getting-started.web :as test]:reload)
(def server (test/-main))
(inc 1)
(ns clojure-webapp-example)
(example (list 1 2 3))
(require [clojure-webapp-example.web :as web]:reload)
(require '[clojure-webapp-example.web :as web]:reload)
(web/example (list 1 2 3))
(ns clojure-webapp-example)
(web/example (list 1 2 3))
(ns clojure-webapp-example.web)
(web/example (list 1 2 3))
(example (list 1 2 3))
(require '[clojure-webapp-example.web :as web]:reload)
(def server (web/-main))
(.stop server)
(require '[clojure-webapp-example.web :as web]:reload)
(def server (web/-main))
(require '[clojure-webapp-example.web :as web]:reload)
(def server (web/-main))
(.stop server)
(require '[clojure-webapp-example.web :as web]:reload)
(def server (web/-main))
(.stop server)
(require '[clojure-webapp-example.web :as web]:reload)
(def server (web/-main))
(.stop server)
(require '[clojure-webapp-example.web :as web]:reload)
(def server (web/-main))
(.stop server)
(require '[clojure-webapp-example.web :as web]:reload)
(def server (web/-main))
(.stop server)
(require '[clojure-webapp-example.web :as web]:reload)
(def server (web/-main))
(.stop server)
(require '[clojure-webapp-example.web :as web]:reload)
(def server (web/-main))
(.stop server)
(require '[clojure-webapp-example.web :as web]:reload)
(def server (web/-main))
